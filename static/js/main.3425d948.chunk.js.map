{"version":3,"sources":["Spirits.js","Intro.js","App.js","registerServiceWorker.js","index.js"],"names":["spirits","require","powerToImage","_name","name","replaceAll","replace","toLowerCase","process","spiritToFrontOfPlayerBoard","spiritToBackOfPlayerBoard","palette","spiritPowers","map","spirit","content","ImageList","cards","cardname","ImageListItem","src","playerBoard","frontOfBoardShowing","setFrontOfBoardShowing","onClick","spiritCards","s","barData","label","value","summary","spiritImage","spiritToImage","CardActionArea","CardMedia","component","image","alt","CardContent","Typography","gutterBottom","variant","color","complexity","dataSource","height","argumentField","valueField","type","ignoreEmptyPoints","visible","nameField","description","spiritToSpiritCard","find","a","key","Spirits","props","React","useState","selectedSpirit","setSelectedSpirit","sortedSpirits","filter","v","complexityFilters","sort","sortType","index","sortTypeToIndex","direction","b","sortBySortType","length","Math","floor","random","Container","Row","Dialog","open","onClose","Card","sx","maxWidth","sortOptions","complexities","Intro","toggleSortDirection","setSortType","Alert","NativeSelect","onChange","event","target","Button","setComplexityFilters","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3425d948.chunk.js","sourcesContent":["/* eslint react/prop-types: 0 */\nimport React from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport { Card, CardActionArea, CardContent, CardMedia, Dialog, ImageList, ImageListItem, Typography } from '@mui/material';\nimport Chart, { ValueAxis, CommonSeriesSettings, SeriesTemplate, Size } from 'devextreme-react/chart';\nimport { Legend } from 'devextreme-react/bar-gauge';\n\nconst spirits = require('./config/spirits.json');\n\nconst spiritToImage = (_name) => {\n  const name = _name.replaceAll(' ', '_');\n  return `${process.env.PUBLIC_URL}/assets/spirits/${name}.png`;\n};\n\nconst powerToImage = (_name) => {\n  const name = _name.replaceAll(' ', '_').replace(/\\W/g, '').toLowerCase();\n  return `${process.env.PUBLIC_URL}/assets/powers/${name}.webp`;\n};\n\nconst spiritToFrontOfPlayerBoard = (_name) => {\n  const name = _name.replaceAll(' ', '_');\n  return `${process.env.PUBLIC_URL}/assets/playerboards/${name}_front.jpg`;\n};\n\nconst spiritToBackOfPlayerBoard = (_name) => {\n  const name = _name.replaceAll(' ', '_');\n  return `${process.env.PUBLIC_URL}/assets/playerboards/${name}_back.jpg`;\n};\n\nconst sortTypeToIndex = (sortType) => {\n  return  {\n    'Offense': 0,\n    'Control': 1,\n    'Fear': 2,\n    'Defense': 3,\n    'Utility': 4,\n    'Random spirit': 0\n  }[sortType];\n};\n\nconst sortBySortType = (sortType) => {\n  const index = sortTypeToIndex(sortType.type);\n\n  if(sortType.direction === '-') {\n    return (a, b) => b.summary[index] - a.summary[index];\n  }\n  else\n  {\n    return (a, b) => a.summary[index] - b.summary[index];\n  }\n};\n\nconst summaryToBarData = (s) => {\n  return [\n    { label: \"Offense\", value: s[0]},\n    { label: \"Control\", value: s[1]},\n    { label: \"Fear\", value: s[2]},\n    { label: \"Defense\", value: s[3]},\n    { label: \"Utility\", value: s[4]},\n  ];\n};\n\nconst palette = [\n  '#ED5564',\n  '#4FC1E8',\n  '#AC92EB',\n  '#A0D568',\n  '#FFCE54',\n];\n\nconst spiritPowers = spirits.map((spirit) => {\n  return { name: spirit.name, content: <>\n    <ImageList>\n      {spirit.cards.map((cardname) =>\n        <ImageListItem key={cardname}>\n          <img src={powerToImage(cardname)} />\n        </ImageListItem>\n        )\n      }\n    </ImageList>\n  </>};\n});\n\nconst playerBoard = (spirit, frontOfBoardShowing, setFrontOfBoardShowing) => {\n  return (spirit &&\n    <img\n      src={frontOfBoardShowing ? spiritToFrontOfPlayerBoard(spirit) : spiritToBackOfPlayerBoard(spirit)}\n      onClick={() => setFrontOfBoardShowing(!frontOfBoardShowing)}\n      />)\n    || <div />;\n};\n\nconst spiritToSpiritPowers = (spirit) => {\n  return (spirit && spiritPowers.find(a => {\n    return a.name === spirit;\n  }).content) || <div />;\n};\n\nconst spiritCards = spirits.map((spirit) => {\n  const barData = summaryToBarData(spirit.summary);\n  const spiritImage = spiritToImage(spirit.name);\n\n  return <CardActionArea key={spirit.name}>\n      <CardMedia\n        component=\"img\"\n        image={spiritImage}\n        alt= {spirit.name}\n                      >\n      </CardMedia>\n      <CardContent>\n        <Typography gutterBottom variant=\"h5\" component=\"div\">\n          {spirit.name}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {spirit.complexity} complexity\n        </Typography>\n        <Chart\n          palette={palette}\n          dataSource={barData}>\n            <Size height={150} />\n\n          <CommonSeriesSettings\n            argumentField=\"label\"\n            valueField=\"value\"\n            type=\"bar\"\n            ignoreEmptyPoints={true}\n          />\n          <ValueAxis label={{visible: false}} />\n          <SeriesTemplate nameField=\"label\" />\n          <Legend visible={false} />\n        </Chart>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {spirit.description}\n        </Typography>\n      </CardContent>\n    </CardActionArea>;\n});\n\nconst spiritToSpiritCard = (spirit) => {\n  return spiritCards.find(a => {\n    return a.key === spirit.name; // lil hacky but eh\n  });\n};\n\nfunction Spirits(props) {\n  const [selectedSpirit, setSelectedSpirit] = React.useState(false);\n  const [frontOfBoardShowing, setFrontOfBoardShowing] = React.useState(true);\n  const sortedSpirits = spirits\n    .filter((v) => props.complexityFilters[v.complexity])\n    .sort(sortBySortType(props.sortType));\n\n  if(props.sortType.type === 'Random spirit' && sortedSpirits.length > 0) {\n    return spiritToSpiritCard(sortedSpirits[Math.floor(Math.random()*sortedSpirits.length)]);\n  }\n  else {\n    return <Container>\n      <Row>\n        <Dialog\n          open={selectedSpirit !== false}\n          onClose={() => { setSelectedSpirit(false); setFrontOfBoardShowing(true); }}\n          >\n          {playerBoard(selectedSpirit, frontOfBoardShowing, setFrontOfBoardShowing)}\n          {spiritToSpiritPowers(selectedSpirit)}\n        </Dialog>\n        {sortedSpirits.map((spirit) =>\n        <Card sx={{ maxWidth: 345 }} key={`${spirit.name}_sorted`} onClick={() => setSelectedSpirit(spirit.name)}>\n          {spiritToSpiritCard(spirit)}\n        </Card>\n        )}\n      </Row>\n    </Container>;\n  }\n}\n\nexport default Spirits;\n","/* eslint react/prop-types: 0 */\nimport { Button, NativeSelect } from '@mui/material';\nimport React from 'react';\nimport { Alert } from 'react-bootstrap';\nimport SouthIcon from '@mui/icons-material/South';\nimport NorthIcon from '@mui/icons-material/North';\n\nconst sortOptions =\n  ([\n    'Offense', 'Control', 'Fear', 'Defense', 'Utility', 'Random spirit'\n  ]).map((type) => {\n    return <option key={type + 'MenuItem'} value={type}>{type}</option>;\n  });\n\nconst complexities = [ 'Low', 'Moderate', 'High', 'Very high' ];\n\nfunction Intro(props) {\n  const sortType = props.sortType;\n\n  const handleChange = (event) => {\n    props.setSortType({type: event.target.value, direction: sortType.direction});\n  };\n\n  const toggleSortDirection = () => {\n    props.setSortType({type: sortType.type, direction: sortType.direction === '-' ? '+' : '-'});\n  };\n\n  return <Alert variant='primary'>\n      <NativeSelect\n      onChange={handleChange}\n      label=\"Sort by\"\n      >\n        {sortOptions}\n      </NativeSelect>\n    <NorthIcon color={sortType.direction === '-' ? 'disabled' : 'primary'} onClick={toggleSortDirection}/>\n    <SouthIcon color={sortType.direction === '-' ? 'primary' : 'disabled'} onClick={toggleSortDirection}/>\n    {complexities.map((complexity) => {\n      return <Button\n        key={complexity}\n        variant={props.complexityFilters[complexity] ? \"contained\" : \"outlined\"}\n        onClick={() => {\n          const complexityFilters = {...props.complexityFilters};\n          complexityFilters[complexity] = !complexityFilters[complexity];\n          props.setComplexityFilters(complexityFilters);\n        }}\n        >\n          {complexity}\n          </Button>;\n    })}\n  </Alert>;\n}\n\nexport default Intro;\n","import React from 'react';\nimport Spirits from './Spirits';\nimport Intro from './Intro';\n\nfunction App() {\n  const [sortType, setSortType] = React.useState({type: 'Offense', direction: '-'});\n  const [complexityFilters, setComplexityFilters] = React.useState({\n    'Low': true, 'Moderate': true, 'High': true, 'Very high': true\n  });\n\n  return <div className='App'>\n    <Intro\n      sortType={sortType}\n      setSortType={setSortType}\n      complexityFilters={complexityFilters}\n      setComplexityFilters={setComplexityFilters}\n      />\n    <Spirits sortType={sortType} complexityFilters={complexityFilters}/>\n  </div>;\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}